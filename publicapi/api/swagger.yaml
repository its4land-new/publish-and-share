---
swagger: "2.0"
info:
  description: "The its4land Public API provides access to the services of the its4land\
    \ Publish and Share platform."
  version: "0.0.2"
  title: "its4land Public API"
  termsOfService: ""
  contact:
    name: "its4land"
    url: "https://its4land.com"
    email: "contact@its4land.com"
  license:
    name: "MIT"
    url: "http://opensource.org/licenses/MIT"
host: "platform.its4land.com"
basePath: "/"
tags:
- name: "Site"
  description: "Everything about Site. A site corresponds to an installation of the\
    \ Publish and Share platform."
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "Projects"
  description: "Everything about projects. A project is the central structure in Publish\
    \ and Share to organize task. A project has at least a Name and a AOI. Every data\
    \ processed by tools in Publish and Share are accessible via the project"
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "Models"
  description: "Everything about models. A model stores all data related to any kind\
    \ of classification process based on any kind of TrainingSets. A Model is related\
    \ to one or Project."
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "TrainingSets"
  description: "Everything about TrainingSets. A TrainingSet is part of Model and\
    \ the base for a classifier"
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "SpatialSources"
  description: "Everything about SpatialSources. A SpatialSource documents the evidence\
    \ for as SpatialUnit. A SpatialSource can be a SketchMap, Orthoimages, etc. An\
    \ SpatialSource may have several manifestations at the same time. See LADM for\
    \ more details."
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "AdminSources"
  description: "Everything about AdminSources. A AdminSource documents the evidence\
    \ for a interrest in land. This could be a right like ownership or a restriction\
    \ like right of way. The AdminSource document itself is not the registration,\
    \ it provides an evidence for a later registration in a LAS. The AdminSource Document\
    \ is related to a SpatialUnit. See LADM for more details."
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "SpatialUnits"
  description: "Everything about SpatialUnits. Details defined by the Concept. See\
    \ LADM for more details."
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "BoundaryFaceString"
  description: "Everything about BoundaryFaceString. See LADM for more details."
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "Classifier"
  description: "Everything about Classifier. A Classifier is part of a Model. The\
    \ Classifier itself is defined by the Application."
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "ModelClasses"
  description: "Everything about ModelClasses. Assigned to Models. Describe the different\
    \ class that can be detected by the Classifier of the Model."
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "ContentItems"
  description: "Everything about ContentItems. Any form of digital content, like files,\
    \ images or other binary and non-binary structures."
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "MetricMapFeatures"
  description: "Everything about MetricMapFeatures. Handel of Point-, Line- and Polygon-TopographicFeature."
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "Images"
  description: "Everything about Images. Orthoimages that should be published on Publish\
    \ and Share"
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "Tags"
  description: "Everything about Tags. Nearly every resource accessible via this API\
    \ can be tagged. Endpoint for handle Tags."
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "WP5ValidationSets"
  description: "Everything about WP5ValidationSets. WP5 requires a different kind\
    \ of classification. This Endpoint is only used by WP5 "
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "Tools"
  description: "Everything about tools"
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "Processes"
  description: "Everything about processes"
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
- name: "Misc"
  description: "General endpoints"
  externalDocs:
    description: "Find out more"
    url: "https://platform.its4land.com"
schemes:
- "https"
paths:
  /projects:
    get:
      tags:
      - "Projects"
      summary: "Get a GeoJSON structure containing a list of Projects."
      description: "Get a GeoJSON structure containing a list of Projects. A single\
        \ project is modeled as a GeoJSON feature."
      operationId: "getProjects"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "aoi"
        in: "query"
        description: "Polygon. The polygon is encoded a comma separated list of coordinates.\
          \ X1, Y1, X2, Y2, ..., Xn, Yn, X1, Y1"
        required: false
        type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
    post:
      tags:
      - "Projects"
      summary: "Create a new project"
      description: "Create a new project. The new project is modeled as a feature\
        \ in a GeoJSON structure. Currently only one project feature is allowed."
      operationId: "newProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newproject"
        description: "New project data"
        required: true
        schema:
          $ref: "#/definitions/ProjectsPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/ProjectsEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
  /projects/{project_uid}:
    get:
      tags:
      - "Projects"
      summary: "Getting single Projects by its UID"
      description: "Getting single Projects by its UID. The project is modeled as\
        \ a feature in a GeoJSON structure."
      operationId: "getProjectsByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "UID of the project"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
    delete:
      tags:
      - "Projects"
      summary: "Deletes a single e project by its UID"
      description: "A single project is deleted. This endpoint deletes the project\
        \ itself and the connected to subordered data like SpatialSources, etc. The\
        \ subordered data itself are not deleted"
      operationId: "delProjectByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "UID of the project"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
    patch:
      tags:
      - "Projects"
      summary: "Update a project"
      description: "Updates some attributes of a project."
      operationId: "updateProjects"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "Project UID to be patched"
        required: true
        type: "string"
      - in: "body"
        name: "patchproject"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/RFC6902PatchRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
  /projects/{project_uid}/Models:
    get:
      tags:
      - "Projects"
      summary: "Returns the models of a project"
      description: "Returns the models of a project"
      operationId: "getModelsByProjectUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "Project UID"
        required: true
        type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ModelsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
    post:
      tags:
      - "Projects"
      summary: "Create a new model"
      description: "Create a new model.  To add a new Model , the content of Models\
        \  must be stored in advanced via the ContentItem endpoint"
      operationId: "newModelUnderProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "Project UID"
        required: true
        type: "string"
      - in: "body"
        name: "newmodel"
        description: "New model data"
        required: true
        schema:
          $ref: "#/definitions/ModelsPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/ProjectsEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
  /projects/{project_uid}/Models/{model_uid}:
    delete:
      tags:
      - "Projects"
      summary: "Removes a model from a project."
      description: "Removes a model from a project. By default only the link between\
        \ model and project is removed."
      operationId: "detachProjectModel"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "Project UID"
        required: true
        type: "string"
      - name: "model_uid"
        in: "path"
        description: "Model UID"
        required: true
        type: "string"
      - name: "force_delete"
        in: "query"
        description: "Deletes the model resource. ********* What's about subordinate\
          \ resources? *********"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
  /projects/{project_uid}/SpatialSources:
    get:
      tags:
      - "Projects"
      summary: "Returns the SpatialSources of a Project."
      description: "Returns the SpatialSources of a Project."
      operationId: "getSpatialSourceByProjectUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "Project UID"
        required: true
        type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SpatialSourcesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
    post:
      tags:
      - "Projects"
      summary: "Create a new SpatialSource"
      description: "Create a new SpatialSource. To add a new SpatialSource , the content\
        \ of SpatialSource  must be stored in advanced via the ContentItem endpoint"
      operationId: "newSpatialSourceUnderProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "Project UID"
        required: true
        type: "string"
      - in: "body"
        name: "newspatialsource"
        description: "New SpatialSource data"
        required: true
        schema:
          $ref: "#/definitions/SpatialSourcesPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/ProjectsEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
  /projects/{project_uid}/SpatialSources/{spatialsource_uid}:
    delete:
      tags:
      - "Projects"
      summary: "Removes a spatialsource from a project."
      description: "Removes a spatial from a project. By default only the link between\
        \ spatialsource and project is removed."
      operationId: "detachProjectSpatialSource"
      produces:
      - "application/json"
      parameters:
      - name: "project_uid"
        in: "path"
        description: "Project UID"
        required: true
        type: "string"
      - name: "spatialsource_uid"
        in: "path"
        description: "SpatialSource UID"
        required: true
        type: "string"
      - name: "force_delete"
        in: "query"
        description: "Deletes the spatialsource resource. ********* What's about subordinate\
          \ resources? *********"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
  /projects/{project_uid}/connectedObjects:
    get:
      tags:
      - "Projects"
      summary: "Returns an array of connect objects"
      description: "Returns an array of connect objects of a project. For each connected\
        \ object the endpoint returns the type, name and uuid"
      operationId: "getConnectedObjectsByProjectUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "Project UID"
        required: true
        type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ConnectedObjectsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
  /projects/{project_uid}/Tags:
    get:
      tags:
      - "Projects"
      summary: "Returns the tags of a project."
      description: "Is this method really necessary? Returns the tags of a project."
      operationId: "getProjectTagsByProjectUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "Project UID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/TagsListResponse"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        404:
          description: "Not Found - Resource not found"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Projects"
    post:
      tags:
      - "Projects"
      summary: "Adds a tag to the project"
      description: "Creates a new tag and attach it to the project. If the tag already\
        \ exist, the existing tag will be attached to the project."
      operationId: "addTagToProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "Project UID"
        required: true
        type: "string"
      - in: "body"
        name: "newtag"
        description: "New Tag data"
        required: true
        schema:
          $ref: "#/definitions/TagsPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/ProjectsEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
  /projects/{project_uid}/Tags/{tag}:
    delete:
      tags:
      - "Projects"
      summary: "Removes a tag from a project."
      description: "Removes a tag from a project. By default only the link between\
        \ tag and project is removed."
      operationId: "detachProjectTag"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "project_uid"
        in: "path"
        description: "Project UID"
        required: true
        type: "string"
      - name: "tag"
        in: "path"
        description: "tag value"
        required: true
        type: "string"
      - name: "force_delete"
        in: "query"
        description: "Deletes the tag resource. ********* Only possible, when tag\
          \ is not attached to any other resource. *********"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Projects"
  /models:
    get:
      tags:
      - "Models"
      summary: "Returns a list of models."
      description: "Returns a list of models."
      operationId: "getModels"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of model UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of model names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "tools"
        in: "query"
        description: "Comma separated list tool names which can make use of the model."
        required: false
        type: "array"
        items:
          type: "string"
      - name: "projects"
        in: "query"
        description: "Comma separated list of project UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ModelsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Models"
    post:
      tags:
      - "Models"
      summary: "Create a new model"
      description: "Create a new model. The model can be assigned to a project via\
        \ the patch://project method. To add a new SpatialSources , the content of\
        \ Models  must be stored in advanced via the ContentItem endpoint"
      operationId: "newModel"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newmodel"
        description: "New Model data"
        required: true
        schema:
          $ref: "#/definitions/ModelsPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/ModelsEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Models"
  /models/{model_uid}:
    get:
      tags:
      - "Models"
      summary: "Returns a single model"
      description: "Returns a single model"
      operationId: "getModelsByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "model_uid"
        in: "path"
        description: "Model  UID"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ModelsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Models"
    patch:
      tags:
      - "Models"
      summary: "Updates some attributes of a model"
      description: "Updates some attributes of a model"
      operationId: "updateModels"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "model_uid"
        in: "path"
        description: "Model  UID"
        required: true
        type: "string"
      - in: "body"
        name: "patchmodel"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/RFC6902PatchRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ModelsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Models"
  /models/{model_uid}/modelclasses:
    get:
      tags:
      - "Models"
      summary: "Returns the model classes of the classifier."
      description: "Returns the model classes of the classifier."
      operationId: "getModelsClassesByModel"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "model_uid"
        in: "path"
        description: "Model  UID"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ModelClassesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Models"
    post:
      tags:
      - "Models"
      summary: "Create a new ModelClass under a model"
      description: "Create a new ModelClass under a model"
      operationId: "newModelClassUnderModel"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "model_uid"
        in: "path"
        description: "Model  UID"
        required: true
        type: "string"
      - in: "body"
        name: "newmodelclass"
        description: "New ModelClass data"
        required: true
        schema:
          $ref: "#/definitions/ModelClassesPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/ModelClassesEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Models"
  /contentitems:
    get:
      tags:
      - "ContentItems"
      summary: "Returns a list of contentitems"
      description: "Returns a list of contentitem metadata based on the filter criteria"
      operationId: "getContentItems"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "UID of a ContentItem"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "contentname"
        in: "query"
        description: "Name of File"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "contenttype"
        in: "query"
        description: "mime/type of the content"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "contentdescription"
        in: "query"
        description: "Free text for description. Only plain text."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ContentItemEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "ContentItems"
    post:
      tags:
      - "ContentItems"
      summary: "Create a new content in the object storage"
      description: "Create a new content in the object storage"
      operationId: "newContentItem"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "newcontent"
        in: "formData"
        description: "Content as multipart from-data"
        required: true
        type: "file"
      - name: "description"
        in: "formData"
        description: "Description of content (optional)"
        required: false
        type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/ContentItemEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "ContentItems"
  /contentitems/{contentitem_id}:
    get:
      tags:
      - "ContentItems"
      summary: "Returns a single content from the object storage."
      description: "Returns a single content from the object storage."
      operationId: "getContentItem"
      produces:
      - "multipart/form-data"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "contentitem_id"
        in: "path"
        description: "UID of the ContentItem"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "ContentItems"
  /classifier:
    get:
      tags:
      - "Classifier"
      summary: "Returns a list of classifier"
      description: "Returns a list of classifier"
      operationId: "getClassifier"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of classifier UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of classifier names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "models"
        in: "query"
        description: "Comma separated list of model UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ClassifierEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Classifier"
    post:
      tags:
      - "Classifier"
      summary: "Create a new classifier"
      description: "Create a new classifier. To add a new Classifier , the content\
        \ of Classifier must be stored in advanced via the ContentItem endpoint"
      operationId: "newClassifier"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newclassifier"
        description: "New Classifier data"
        required: true
        schema:
          $ref: "#/definitions/ClassifierPostRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/ClassifierEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Classifier"
  /classifier/{classifier_id}:
    get:
      tags:
      - "Classifier"
      summary: "Returns a single classifier."
      description: "Returns a single classifier."
      operationId: "getClassifierByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "classifier_id"
        in: "path"
        description: "Classifier UID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ClassifierEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Classifier"
  /metricmapfeature:
    get:
      tags:
      - "MetricMapFeatures"
      summary: "Returns MetricMapFeature"
      description: "Returns MetricMapFeature in a GeoJSON structure. A metric map\
        \ feature is modeled as a feature in  the GeoJSON structure."
      operationId: "getMetricMapFeature"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "querywindow"
        in: "query"
        description: "Polygon. The polygon is encoded a comma separated list of coordinates.\
          \ X1, Y1, X2, Y2, ..., Xn, Yn, X1, Y1"
        required: true
        type: "string"
      - name: "fgroup"
        in: "query"
        description: "Restricts the output to the listed feature group"
        required: false
        type: "string"
      - name: "ftype"
        in: "query"
        description: "Restricts the output to the listed feature types. When used\
          \ in combination with fgroup, output contains only those ftype which are\
          \ contained in the feature groups"
        required: false
        type: "string"
      - name: "fsubtype"
        in: "query"
        description: "Restricts the output to the listed feature types. When used\
          \ in combination with fgroup and/or ftype, output contains only those fsubtype\
          \ which are contained in the feature groups and feature types"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/MetricMapFeaturesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "MetricMapFeatures"
    post:
      tags:
      - "MetricMapFeatures"
      summary: "Create a new metricMapFeature"
      description: "Create a new MetricMapFeature. The new metric map feature is a\
        \ feature in the GeoJSON structure. Currently ony one new feature per request\
        \ is allowed."
      operationId: "newMetricMapFeature"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newmetricmapfeature"
        description: "New MetricMap Feature data"
        required: true
        schema:
          $ref: "#/definitions/MetricMapFeaturePostRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/MetricMapFeaturesEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "MetricMapFeatures"
  /metricmapfeature/{mmf_uid}:
    patch:
      tags:
      - "MetricMapFeatures"
      summary: "Updates a metric map feature"
      description: "Updates a metric map feature. Only fgroup, fname, ftype, fsubtype\
        \ and fURI can be updated"
      operationId: "updateMetricMapFeature"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "mmf_uid"
        in: "path"
        description: "MetricMapFeature UID"
        required: true
        type: "string"
      - in: "body"
        name: "patchmetricmapfeature"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/RFC6902PatchRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/MetricMapFeaturesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "MetricMapFeatures"
  /modelclasses:
    get:
      tags:
      - "ModelClasses"
      summary: "Returns ModelClasses"
      description: "Returns ModelClasses"
      operationId: "getModelClasses"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "UID"
        in: "query"
        description: "Comma separated list of ModelClasses UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "nameinmodel"
        in: "query"
        description: "Comma separated list of ModelClasses names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "conceptname"
        in: "query"
        description: "Comma separated list of ModelClasses concept names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ModelClassesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "ModelClasses"
  /modelclasses/{modelclasses_uid}:
    get:
      tags:
      - "ModelClasses"
      summary: "Returns a single model class"
      description: "Returns a single model class"
      operationId: "getModelClassesByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "modelclasses_uid"
        in: "path"
        description: "ModelClass UID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ModelClassesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "ModelClasses"
    patch:
      tags:
      - "ModelClasses"
      summary: "Updates some attributes of a ModelClass"
      description: "Updates some attributes of a ModelClass"
      operationId: "updateModelClasses"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "modelclasses_uid"
        in: "path"
        description: "ModelClass UID"
        required: true
        type: "string"
      - in: "body"
        name: "patchmodelclasses"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/RFC6902PatchRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ModelClassesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "ModelClasses"
  /spatialsources:
    get:
      tags:
      - "SpatialSources"
      summary: "Returns a list of SpatialSources"
      description: "Returns a list of SpatialSources"
      operationId: "getSpatialSources"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of SpatialSources UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of SpatialSources names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "type"
        in: "query"
        description: "Comma separated list of SpatialSources types"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "projects"
        in: "query"
        description: "Comma separated list of project UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SpatialSourcesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialSources"
    post:
      tags:
      - "SpatialSources"
      summary: "Create a new SpatialSource"
      description: "Create a new SpatialSource. To add a new SpatialSources , the\
        \ content of SpatialSources  must be stored in advanced via the ContentItem\
        \ endpoint."
      operationId: "newSpatialSource"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newspatialsource"
        description: "New SpatialSource data"
        required: true
        schema:
          $ref: "#/definitions/SpatialSourcesPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "process_uid"
        in: "header"
        description: "deprecated"
        required: false
        type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/SpatialSourcesEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialSources"
  /spatialsource/{spatialsource_uid}:
    get:
      tags:
      - "SpatialSources"
      summary: "Returns a single SpatialSource"
      description: "Returns a single SpatialSource"
      operationId: "getSpatialSourceByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "spatialsource_uid"
        in: "path"
        description: "SpatialSource UID"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SpatialSourcesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialSources"
    put:
      tags:
      - "SpatialSources"
      summary: "Replace an existing SpatialSource by a newer version"
      description: "An existing SpatialSource will be replaced by a newer version.\
        \ The UID of SpatialSource remains"
      operationId: "putSpatialSourceByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "spatialsource_uid"
        in: "path"
        description: "SpatialSource UID"
        required: true
        type: "string"
      - in: "body"
        name: "updatedspatialsource"
        description: "Updated spatial source"
        required: true
        schema:
          $ref: "#/definitions/SpatialSourcesPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SpatialSourcesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialSources"
  /spatialsource/{spatialsource_uid}/AdditionalDocument:
    get:
      tags:
      - "SpatialSources"
      summary: "Returns the additional documents of a spatial source"
      description: "Returns the additional documents of a spatial source"
      operationId: "getSpatialSourceAddDocs"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "spatialsource_uid"
        in: "path"
        description: "SpatialSource UID"
        required: true
        type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AdditionalDocumentsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialSources"
    post:
      tags:
      - "SpatialSources"
      summary: "Add a new additional document to a spatial source"
      description: "Add a new additional document to a spatial source"
      operationId: "newSpatialSourceAddAddDoc"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "spatialsource_uid"
        in: "path"
        description: "SpatialSource UID"
        required: true
        type: "string"
      - in: "body"
        name: "newadddocdata"
        description: "New additional document data"
        required: true
        schema:
          $ref: "#/definitions/AdditionalDocumentsPost"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/AdditionalDocumentsEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialSources"
  /spatialsource/{spatialsource_uid}/AdditionalDocument/{adddoc_uid}:
    get:
      tags:
      - "SpatialSources"
      summary: "Returns the additional documents of a spatial source"
      description: "Returns the additional documents of a spatial source"
      operationId: "getSpatialSourceSingleAddDoc"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "spatialsource_uid"
        in: "path"
        description: "SpatialSource UID"
        required: true
        type: "string"
      - name: "adddoc_uid"
        in: "path"
        description: "SpatialSource UID"
        required: true
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AdditionalDocumentsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialSources"
    delete:
      tags:
      - "SpatialSources"
      summary: "Removes an additional document for a spatial source."
      description: "Removes an additional document for a spatial source. By default\
        \ only the link between additional document and spatial source is removed."
      operationId: "detachSpatialSourceAddDoc"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "spatialsource_uid"
        in: "path"
        description: "SpatialSource UID"
        required: true
        type: "string"
      - name: "adddoc_uid"
        in: "path"
        description: "SpatialSource UID"
        required: true
        type: "string"
      - name: "force_delete"
        in: "query"
        description: "Deletes the additional document resource."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SpatialSourcesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialSources"
  /adminsources:
    get:
      tags:
      - "AdminSources"
      summary: "Returns a list of AdminSource document indizes"
      description: "Returns a list of AdminSource document indizes"
      operationId: "getAdminSources"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of AdminSources UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of AdminSources names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "type"
        in: "query"
        description: "Comma separated list of AdminSources types"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "projects"
        in: "query"
        description: "Comma separated list of project UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "spatialunits"
        in: "query"
        description: "Comma separated list of SpatialUnit UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AdminSourcesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "AdminSources"
    post:
      tags:
      - "AdminSources"
      summary: "Creates a new AdminSource"
      description: "Creates a new AdminSource"
      operationId: "newAdminSource"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newadminsource"
        description: "New AdminSource data"
        required: true
        schema:
          $ref: "#/definitions/AdminSourcesPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/AdminSourcesEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "AdminSources"
  /adminsources/{adminsource_uid}:
    get:
      tags:
      - "AdminSources"
      summary: "Returns a single Admin Source"
      description: "Returns a single Admin Source"
      operationId: "getAdminSourceByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "adminsource_uid"
        in: "path"
        description: "AdminSource UID"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AdminSourcesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "AdminSources"
    patch:
      tags:
      - "AdminSources"
      summary: "Update an Admin Source"
      description: "Update an Admin Source"
      operationId: "updateAdminSource"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "adminsource_uid"
        in: "path"
        description: "AdminSource UID"
        required: true
        type: "string"
      - in: "body"
        name: "patchadminsource"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/RFC6902PatchRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AdminSourcesEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "AdminSources"
  /spatialunits:
    get:
      tags:
      - "SpatialUnits"
      summary: "Returns a list of SpatialUnits in a GeoJSON structure."
      description: "Returns a list of SpatialUnits as GeoJSON feature with 2D polygon\
        \ base spatial profile"
      operationId: "getSpatialUnits"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of AdminSources UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of AdminSources names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "concept"
        in: "query"
        description: "Comma separated list of Spatial Unit concepts"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "level"
        in: "query"
        description: "Comma separated list of LADM Levels"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "projects"
        in: "query"
        description: "Comma separated list of project UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "adminsource"
        in: "query"
        description: "Comma separated list of SpatialSource UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "querywindow"
        in: "query"
        description: "Polygon. The polygon is encoded a comma separated list of coordinates.\
          \ X1, Y1, X2, Y2, ..., Xn, Yn, X1, Y1"
        required: true
        type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SpatialUnitsFeatureEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
    post:
      tags:
      - "SpatialUnits"
      summary: "Create a new SpatialUnit"
      description: "Create a new SpatialUnit with 2d polygon base spatial profile.\
        \ The spatial unit is modeled as a GeoJSON feature. The endpoint currently\
        \ allows only one spatial unit per request."
      operationId: "newSpatialUnit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newspatialunit"
        description: "New Spatial Unit data"
        required: true
        schema:
          $ref: "#/definitions/SpatialUnitsFeaturePostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/SpatialUnitsFeatureEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
  /spatialunits/create2Dpolygonspatialunit:
    post:
      tags:
      - "SpatialUnits"
      summary: "Creates a spatial unit"
      description: "Create a 2D polygon base spatial unit from a boundary face string\
        \  as GeoJSON"
      operationId: "create2PpolygonSPUfromBFS"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "spatialunitdata"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/SpatialUnitBaseFeaturePostRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/SpatialUnitsFeatureEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
  /spatialunits/qualitative:
    get:
      tags:
      - "SpatialUnits"
      summary: "Returns a list of SpatialUnits"
      description: "Returns a list of SpatialUnits as feature with geometry"
      operationId: "getSpatialUnitsQualitative"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of Spatial unit UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of AdminSources names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "concept"
        in: "query"
        description: "Comma separated list of Spatial Unit concepts"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "level"
        in: "query"
        description: "Comma separated list of LADM Levels"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "projects"
        in: "query"
        description: "Comma separated list of project UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "adminsource"
        in: "query"
        description: "Comma separated list of SpatialSource UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "querywindow"
        in: "query"
        description: "Polygon. The polygon is encoded a comma separated list of coordinates.\
          \ X1, Y1, X2, Y2, ..., Xn, Yn, X1, Y1"
        required: true
        type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SpatialUnitsFeatureEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
    post:
      tags:
      - "SpatialUnits"
      summary: "Create a new SpatialUnit"
      description: "Create a new SpatialUnit with qualitative base spatial profile"
      operationId: "newSpatialUnitQualitative"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newspatialunit"
        description: "New Spatial Unit data"
        required: true
        schema:
          $ref: "#/definitions/SpatialUnitsFeaturePostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/SpatialUnitsFeatureEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
  /spatialunits/{spatialunit_uid}:
    get:
      tags:
      - "SpatialUnits"
      summary: "Returns a list of SpatialUnits"
      description: "Returns a list of SpatialUnits as feature with 2d polygon base\
        \ spatial profile"
      operationId: "getSpatialUnitsByUUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "spatialunit_uid"
        in: "path"
        description: "Spatial unit UID"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SpatialUnitsFeatureEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
    patch:
      tags:
      - "SpatialUnits"
      summary: "Update an spatial unit"
      description: "Update an spatial unit with 2d polygon base spatial profile"
      operationId: "updateSpatialUnit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "spatialunit_uid"
        in: "path"
        description: "Spatial unit UID"
        required: true
        type: "string"
      - in: "body"
        name: "patchspatialunit"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/RFC6902PatchRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SpatialUnitsFeatureEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
  /spatialunits/qualitative/{spatialunit_uid}:
    get:
      tags:
      - "SpatialUnits"
      summary: "Returns a single spatial unit"
      description: "Returns a single spatial unit with qualitative base qualitative\
        \ base spatial profile"
      operationId: "getSpatialUnitByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "spatialunit_uid"
        in: "path"
        description: "Spatial unit UID"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SpatialUnitsFeatureEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
    patch:
      tags:
      - "SpatialUnits"
      summary: "Updates a new SpatialUnit"
      description: "Updates SpatialUnit with qualitative base spatial profile"
      operationId: "updateSpatialUnitQualitative"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "spatialunit_uid"
        in: "path"
        description: "Spatial unit UID"
        required: true
        type: "string"
      - in: "body"
        name: "patchspatialunit"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/RFC6902PatchRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/SpatialUnitsFeatureEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
  /spatialunits/concepts:
    get:
      tags:
      - "SpatialUnits"
      summary: "Returns a list of spatial units concepts"
      description: "Returns a list of spatial units concepts"
      operationId: "getSpatialUnitsConcepts"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of Spatial unit UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of AdminSources names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "projects"
        in: "query"
        description: "Comma separated list of project UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "spatialunit"
        in: "query"
        description: "Comma separated list of SpatialSource UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SpatialUnitsFeatureEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
    post:
      tags:
      - "SpatialUnits"
      summary: "Create a new concept for a spatial unit"
      description: "Create a new concept for a spatial unit."
      operationId: "newSpatialUnitConcept"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newspatialunitconcept"
        description: "New Spatial Unit concept data"
        required: true
        schema:
          $ref: "#/definitions/SpatialUnitConceptPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/SpatialUnitConceptEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
  /spatialunits/concepts/{concept_uid}:
    get:
      tags:
      - "SpatialUnits"
      summary: "Returns a single spatial unit concept"
      description: "Returns a single spatial unit concept"
      operationId: "getSpatialUnitConceptByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "concept_uid"
        in: "path"
        description: "Spatial unit concept UID"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SpatialUnitConceptEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
    patch:
      tags:
      - "SpatialUnits"
      summary: "Updates a new spatial unit concept"
      description: "Updates a spatial unit concept"
      operationId: "updateSpatialUnitConcept"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "concept_uid"
        in: "path"
        description: "Spatial unit concept UID"
        required: true
        type: "string"
      - in: "body"
        name: "patchspatialunitconcept"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/RFC6902PatchRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/SpatialUnitConceptEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "SpatialUnits"
  /boundaryfacestring:
    get:
      tags:
      - "BoundaryFaceString"
      summary: "Returns a list of boundary face strings in a GeoJSON structure."
      description: "Returns a list of boundary face strings. A boundary face string\
        \ is modeled as a GeoJSON feature."
      operationId: "getBoundaryFaceString"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of Spatial unit UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of AdminSources names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "projects"
        in: "query"
        description: "Comma separated list of project UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "spatialunit"
        in: "query"
        description: "Comma separated list of SpatialSource UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/BoundaryFaceStringEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "BoundaryFaceString"
    post:
      tags:
      - "BoundaryFaceString"
      summary: "Create a new concept for a boundary face string"
      description: "Create a new concept for a boundary face string."
      operationId: "newBoundaryFaceString"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newboundaryfacestring"
        description: "New boundary face string"
        required: true
        schema:
          $ref: "#/definitions/BoundaryFaceStringPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/BoundaryFaceStringEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "BoundaryFaceString"
  /boundaryfacestring/{boundaryfacestring_uid}:
    get:
      tags:
      - "BoundaryFaceString"
      summary: "Returns a single boundary face string"
      description: "Returns a boundary face string as GeoJSON as a feature in a GeoJSON\
        \ structure."
      operationId: "getBoundaryFaceStringByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "boundaryfacestring_uid"
        in: "path"
        description: "Boundary face string UID"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/BoundaryFaceStringEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "BoundaryFaceString"
    put:
      tags:
      - "BoundaryFaceString"
      summary: "Replace an existing BoundaryFaceString by a newer version"
      description: "An existing BoundaryFaceString will be replaced by a newer version.\
        \ The UID of BoundaryFaceString remains"
      operationId: "putBoundaryFaceStringByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "boundaryfacestring_uid"
        in: "path"
        description: "Boundary face string UID"
        required: true
        type: "string"
      - in: "body"
        name: "updatedboundaryfacestring"
        description: "Updated boundary face string"
        required: true
        schema:
          $ref: "#/definitions/BoundaryFaceStringPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/BoundaryFaceStringEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "BoundaryFaceString"
    patch:
      tags:
      - "BoundaryFaceString"
      summary: "Updates a boundary face string"
      description: "Updates a boundary face string"
      operationId: "updateBoundaryFaceString"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "boundaryfacestring_uid"
        in: "path"
        description: "Boundary face string UID"
        required: true
        type: "string"
      - in: "body"
        name: "patchboundaryfacestring"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/RFC6902PatchRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/BoundaryFaceStringEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "BoundaryFaceString"
  /trainingsets:
    get:
      tags:
      - "TrainingSets"
      summary: "Returns a list of TrainingSets"
      description: "Returns a list of TrainingSets"
      operationId: "getTrainingSets"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of TrainingSet UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of TrainingSet Names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "models"
        in: "query"
        description: "Comma separated list of model UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TrainingsSetEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "TrainingSets"
    post:
      tags:
      - "TrainingSets"
      summary: "Create a new TrainingSet"
      description: "Create a new TrainingSet. To add a new TrainingSet , the content\
        \ of TrainingSet  must be stored in advanced via the ContentItem endpoint"
      operationId: "newTrainingSet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newtrainingset"
        description: "New TrainingSet data"
        required: true
        schema:
          $ref: "#/definitions/TrainingSetsPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/TrainingsSetEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "TrainingSets"
  /trainingsets/{trainingsets_uid}:
    get:
      tags:
      - "TrainingSets"
      summary: "Returns a single TrainingSet"
      description: "Returns a single TrainingSet"
      operationId: "getTrainingSetByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "trainingsets_uid"
        in: "path"
        description: "TrainingSet UID"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/TrainingsSetEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "TrainingSets"
  /tags:
    get:
      tags:
      - "Tags"
      summary: "Get a list of tags"
      description: "Get a list of tags"
      operationId: "getTags"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of Tag UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "displayvalue"
        in: "query"
        description: "Comma separated list of Tag display value"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "objecttypes"
        in: "query"
        description: "Comma separated list of objects types"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "objectuuid"
        in: "query"
        description: "Comma separated list of object UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TagsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Tags"
  /tags/{tag_name}:
    get:
      tags:
      - "Tags"
      summary: "Returns a single tag"
      description: "Returns a tag"
      operationId: "getTagByName"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "tag_name"
        in: "path"
        description: "Tag Name"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/TagsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Tags"
    patch:
      tags:
      - "Tags"
      summary: "Updates a tag"
      description: "Updates a tag"
      operationId: "updateTagByName"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "tag_name"
        in: "path"
        description: "Tag UID"
        required: true
        type: "string"
      - in: "body"
        name: "patchtag"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/RFC6902PatchRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/TagsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Tags"
  /tags/{tag_uid}/merge:
    patch:
      tags:
      - "Tags"
      summary: "Merge tags"
      description: "merge tags"
      operationId: "mergeTagByUID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "tag_uid"
        in: "path"
        description: "Tag UID"
        required: true
        type: "string"
      - in: "body"
        name: "mergetag"
        description: "Update data"
        required: true
        schema:
          $ref: "#/definitions/RFC6902PatchRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/TagsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Tags"
  /WP5ValidationSets:
    get:
      tags:
      - "WP5ValidationSets"
      summary: "Returns a list of WP5ValidationSets"
      description: "Returns a list of WP5ValidationSets"
      operationId: "getWP5ValidationSets"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of TrainingSet UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of WP5ValidationSets Names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "models"
        in: "query"
        description: "Comma separated list of model UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "projects"
        in: "query"
        description: "Comma separated list of project UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WP5ValidationSetsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "WP5ValidationSets"
    post:
      tags:
      - "WP5ValidationSets"
      summary: "Create a new WP5ValidationSets"
      description: "Create a new TrainingSet. To add a new WP5ValidationSets , the\
        \ content of WP5ValidationSets  must be stored in advanced via the ContentItem\
        \ endpoint"
      operationId: "newWP5ValidationSets"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newwp5validationsets"
        description: "New WP5ValidationSet data"
        required: true
        schema:
          $ref: "#/definitions/WP5ValidationSetsPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/WP5ValidationSetsEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "WP5ValidationSets"
  /WP5ValidationSets/{wp5validationset_uid}:
    get:
      tags:
      - "WP5ValidationSets"
      summary: "Returns a single WP5ValidationSet"
      description: "Returns a single WP5ValidationSet"
      operationId: "getWP5ValidationSetByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "wp5validationset_uid"
        in: "path"
        description: "WP5ValidationSet UID"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/WP5ValidationSetsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "WP5ValidationSets"
  /DDILayers:
    get:
      tags:
      - "Misc"
      summary: "Return a list of registered DDI (WFS/WMS) Layer"
      description: "Return a list of registered DDI (WFS/WMS) Layer"
      operationId: "getDDILayers"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of TrainingSet UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of WP5ValidationSets Names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "type"
        in: "query"
        description: "Comma separated list OGC types"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "projects"
        in: "query"
        description: "Comma separated list of project UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "tags"
        in: "query"
        description: "Comma separated list of tags"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DDILayersEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Misc"
    post:
      tags:
      - "Misc"
      summary: "Register a new DDI (WFS/WMS) Layer"
      description: "Register DDI (WFS/WMS) Layer"
      operationId: "newDDILayers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newDDILayer"
        description: "New image metadata"
        required: true
        schema:
          $ref: "#/definitions/DDILayersPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/DDILayersEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Misc"
  /tools:
    get:
      tags:
      - "Tools"
      summary: "Get a list of tools"
      description: "Get a list of tools"
      operationId: "getTools"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of Tag UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "name"
        in: "query"
        description: "Comma separated list of tool names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "version"
        in: "query"
        description: "Tool version. By default, the latest version will be returned.\
          \ * returns all versions."
        required: false
        type: "string"
      - name: "supplier"
        in: "query"
        description: "Comma separated list of supplier"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of fields"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ToolsEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Tools"
  /processes:
    get:
      tags:
      - "Processes"
      summary: "Get a list of processes"
      description: "Get a list of processes"
      operationId: "getProcesses"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "uid"
        in: "query"
        description: "Comma separated list of Tag UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "project"
        in: "query"
        description: "Comma separated list of project uid"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "status"
        in: "query"
        description: "Status of the project. Can be one of:\n  * WAITING: Process\
          \ is queued for execution\n  * RUNNING: Process is currently executing\n\
          \  * FINISHED: Process terminated normally\n  * ABORTED: Process terminated\
          \ unexpectedly\n  * ZOMBIE: Process is listed in the platform process table,\
          \ but the internal (process) API has no information about it. Possible in\
          \ case of historical/archived processes or due to platform error.\n"
        required: false
        type: "string"
        enum:
        - "WAITING"
        - "RUNNING"
        - "FINISHED"
        - "ABORTED"
        - "ZOMBIE"
      - name: "tooluid"
        in: "query"
        description: "Comma separated list of tool UID"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of fields"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProcessEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Processes"
    post:
      tags:
      - "Processes"
      summary: "Creates a new  processes"
      description: "Creates a new  processes"
      operationId: "createProcesses"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - in: "body"
        name: "newprocess"
        description: "New process metadata"
        required: true
        schema:
          $ref: "#/definitions/ProcessPostRequest"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/ProcessEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Processes"
  /processes/{process_uid}:
    get:
      tags:
      - "Processes"
      summary: "Returns metadata for a single process"
      description: "Returns metadata for a single process"
      operationId: "getProcessByUID"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "process_uid"
        in: "path"
        description: "Process UID"
        required: true
        type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProcessEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Processes"
  /processes/{process_uid}/log:
    get:
      tags:
      - "Processes"
      summary: "Get the full log of a process"
      description: "Get the full log of a process. Oldest entry first"
      operationId: "getProcessLog"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "process_uid"
        in: "path"
        description: "Process UID"
        required: true
        type: "string"
      - name: "loglevel"
        in: "query"
        description: "LogLevel : error, info, warning, debug. Default is info. The\
          \ higher order level includes the lower level"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "logsource"
        in: "query"
        description: "Source of the log entry. Values: GUI, <ToolName>"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LogEntryEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Processes"
    post:
      tags:
      - "Processes"
      summary: "Writes a single log entry"
      description: "Writes a single log entry"
      operationId: "createProcessLog"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "process_uid"
        in: "path"
        description: "Process UID"
        required: true
        type: "string"
      - in: "body"
        name: "newlogentry"
        description: "New log entry"
        required: true
        schema:
          $ref: "#/definitions/LogEntryPostRequest"
      - name: "i4l-process-uid"
        in: "header"
        description: "Process UID. This parameter can be used by an its4land tool\
          \ running inside the runtime environment to pass the process uid to the\
          \ endpoint. With this information the endpoint can associate the newly created\
          \ or updated resource with the process."
        required: false
        type: "string"
      responses:
        201:
          description: "Created - Resource created. URL to new resource in Location\
            \ header"
          schema:
            $ref: "#/definitions/LogEntryEndpointType"
          headers:
            Location:
              type: "string"
              description: "Contains the resource URI"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Processes"
  /PuSConfig:
    get:
      tags:
      - "Misc"
      summary: "Returns a list of configuration parameters as Key Value"
      description: "Returns a list of configuration parameters as Key Value. E.g.\
        \ URL of the DDI server"
      operationId: "getPuSConfig"
      produces:
      - "application/json"
      parameters:
      - name: "envelope"
        in: "query"
        description: "The endpoint can package everything (header, status code) neatly\
          \ into the response body. Include envelope=true as a request parameter.\
          \ The API will always return a 200 HTTP status code. The real status, headers\
          \ and response will be within the body."
        required: false
        type: "string"
        enum:
        - "yes"
        - "no"
      - name: "page"
        in: "query"
        description: "Requests for collections can return between 0 and N results,\
          \ controlled using the per_page and page query parameters. All endpoints\
          \ are limited to 10 results by default."
        required: false
        type: "integer"
      - name: "sort"
        in: "query"
        description: "The sorting is initiated by the sort query parameter and a list\
          \ of comma separated list of fields to sort by."
        required: false
        type: "string"
      - name: "fields"
        in: "query"
        description: "Comma separated list of field names"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "embed"
        in: "query"
        description: "Embedding is triggered by passing in an embed query parameter,\
          \ which takes a comma separated list of endpoint types. Single fields can\
          \ be selected a dot-notation (endpoint-type.property-name)"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PublishAndShareConfigEndpointType"
        204:
          description: "No Content - Request succeeded, but no response body"
        400:
          description: "Bad Request - Could not parse request"
        401:
          description: "Unauthorized - No authentication credentials provided or authentication\
            \ failed"
        403:
          description: "Forbidden - Authenticated user does not have access"
        404:
          description: "Not Found - Resource not found"
        409:
          description: "Conflict"
        415:
          description: "Unsupported Media Type"
        422:
          description: "Unprocessable Entry"
        423:
          description: "Locked"
        500:
          description: "Internal Server Error"
        501:
          description: "Not Implemented"
      x-swagger-router-controller: "Misc"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "X-i4lAPIKEY"
    in: "header"
definitions:
  SiteEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
  ProjectsEndpointType:
    type: "object"
    properties:
      type:
        type: "string"
        description: "GeoJson feature collection"
        enum:
        - "FeatureCollection"
      name:
        type: "string"
        description: "Name of the feature collection. Always i4lProject"
        enum:
        - "i4lProject"
      crs:
        $ref: "#/definitions/ProjectsEndpointType_crs"
      features:
        type: "array"
        items:
          $ref: "#/definitions/ProjectsEndpointType_features"
    example:
      features:
      - geometry:
          coordinates:
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          type: "Polygon"
        type: "Feature"
        properties:
          UID: "UID"
          ProjectDir: "ProjectDir"
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          SpatialSources:
          - UID: "UID"
          - UID: "UID"
          Models:
          - UID: "UID"
          - UID: "UID"
          Tags:
          - "Tags"
          - "Tags"
          Name: "Name"
      - geometry:
          coordinates:
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          type: "Polygon"
        type: "Feature"
        properties:
          UID: "UID"
          ProjectDir: "ProjectDir"
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          SpatialSources:
          - UID: "UID"
          - UID: "UID"
          Models:
          - UID: "UID"
          - UID: "UID"
          Tags:
          - "Tags"
          - "Tags"
          Name: "Name"
      crs:
        type: "name"
        properties:
          name: "urn:ogc:def:crs:OGC:1.3:CRS84"
      name: "i4lProject"
      type: "FeatureCollection"
  ProjectsPostRequest:
    type: "object"
    required:
    - "crs"
    - "features"
    - "name"
    - "type"
    properties:
      type:
        type: "string"
        description: "GeoJson feature collection"
        enum:
        - "FeatureCollection"
      name:
        type: "string"
        description: "Name of the feature collection. Always i4lProject"
        enum:
        - "i4lProject"
      crs:
        $ref: "#/definitions/ProjectsEndpointType_crs"
      features:
        type: "array"
        items:
          $ref: "#/definitions/ProjectsPostRequest_features"
    example:
      features:
      - geometry:
          coordinates:
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          type: "Polygon"
        type: "Feature"
        properties:
          ProjectDir: "ProjectDir"
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          SpatialSources:
          - UID: "UID"
          - UID: "UID"
          Models:
          - UID: "UID"
          - UID: "UID"
          Tags:
          - "Tags"
          - "Tags"
          Name: "Name"
      - geometry:
          coordinates:
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          type: "Polygon"
        type: "Feature"
        properties:
          ProjectDir: "ProjectDir"
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          SpatialSources:
          - UID: "UID"
          - UID: "UID"
          Models:
          - UID: "UID"
          - UID: "UID"
          Tags:
          - "Tags"
          - "Tags"
          Name: "Name"
      crs:
        type: "name"
        properties:
          name: "urn:ogc:def:crs:OGC:1.3:CRS84"
      name: "i4lProject"
      type: "FeatureCollection"
  ProjectsPatchRequest:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      ProjectDir:
        type: "string"
        description: "URI to a directory resource. Not clear if needed."
      Models:
        type: "array"
        description: "Array of models (UID)."
        items:
          $ref: "#/definitions/ProjectsEndpointType_properties_Models"
      SpatialSources:
        type: "array"
        description: "Array of SpatialSources (UID)."
        items:
          $ref: "#/definitions/ProjectsPostRequest_properties_SpatialSources"
      AOI:
        type: "array"
        description: "Polygon. The polygon is encoded a comma separated list of coordinates.\
          \ X1, Y1, X2, Y2, ..., Xn, Yn, X1, Y1. Patch requires a complete polygon."
        items:
          type: "string"
      Tags:
        type: "array"
        description: "Array of tags (strings) of the associated models. Patch requires\
          \ an updated array."
        items:
          type: "string"
  ProjectsEndpointType2:
    type: "object"
    properties:
      type:
        type: "string"
        description: "GeoJson feature collection"
        enum:
        - "FeatureCollection"
      name:
        type: "string"
        description: "Name of the feature collection. Always i4lProject"
        enum:
        - "i4lProject"
      crs:
        $ref: "#/definitions/ProjectsEndpointType_crs"
      features:
        type: "array"
        items:
          $ref: "#/definitions/ProjectsEndpointType2_features"
  ModelsEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      TrainingSet:
        type: "string"
        description: "UID of the TrainingSet."
      Classifier:
        type: "string"
        description: "UID of the assigned classifier"
      Tools:
        type: "array"
        description: "Comma separated list tool names which can make use of the model."
        items:
          type: "string"
      ModelClasses:
        type: "array"
        description: "Array of ModelClasses (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_ModelClasses"
      NumModelClasses:
        type: "integer"
        format: "init32"
        description: "Number of ModelClasses in the Model"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Projects:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_Projects"
    example:
      UID: "UID"
      NumModelClasses: 0
      Description: "Description"
      TrainingSet: "TrainingSet"
      Tools:
      - "Tools"
      - "Tools"
      Projects:
      - UID: "UID"
      - UID: "UID"
      Classifier: "Classifier"
      ModelClasses:
      - UID: "UID"
      - UID: "UID"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  ModelsPostRequest:
    type: "object"
    required:
    - "Description"
    - "Name"
    properties:
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      TrainingSet:
        type: "string"
        description: "TrainingSet of the model (UID)"
      Classifier:
        type: "string"
        description: "Classifier UID"
      Tools:
        type: "array"
        description: "Comma separated list tool names which can make use of the model."
        items:
          type: "string"
      ModelClasses:
        type: "array"
        description: "Array of ModelClasses (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_ModelClasses"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Projects:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_Projects"
    example:
      Description: "Description"
      TrainingSet: "TrainingSet"
      Tools:
      - "Tools"
      - "Tools"
      Projects:
      - UID: "UID"
      - UID: "UID"
      Classifier: "Classifier"
      ModelClasses:
      - UID: "UID"
      - UID: "UID"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  ModelsPatchRequest:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      TrainingSet:
        type: "string"
        description: "TrainingSet of the model (UID)"
      Classifier:
        type: "string"
        description: "UID of the assigned classifier"
      Tools:
        type: "array"
        description: "Comma separated list tool names which can make use of the model."
        items:
          type: "string"
      ModelClasses:
        type: "array"
        description: "Array of ModelClasses (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_ModelClasses"
      Tags:
        type: "array"
        description: "Array of tags (strings). Patch requires an updated array."
        items:
          type: "string"
      Projects:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_Projects"
  ModelClassesEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID"
      ConceptName:
        type: "string"
        description: "Freely chosen name of the concept represented by the class"
      NameInModel:
        type: "string"
        description: "Freely chosen name of the concept represented by the class"
      ConceptImage:
        type: "string"
        description: "UID of an image that illustrates the concept. The image must\
          \ be stored in advanced via the ContentItem endpoint."
      Model:
        $ref: "#/definitions/ModelClassesEndpointType_Model"
    example:
      NameInModel: "NameInModel"
      UID: "UID"
      ConceptImage: "ConceptImage"
      Model:
        UID: "UID"
      ConceptName: "ConceptName"
  ModelClassesPostRequest:
    type: "object"
    properties:
      ConceptName:
        type: "string"
        description: "Freely chosen name of the concept represented by the class"
      NameInModel:
        type: "string"
        description: "Freely chosen name of the concept represented by the class"
      ConceptImage:
        type: "string"
        description: "UID of an image that illustrates the concept. The image must\
          \ be stored in advanced via the ContentItem endpoint."
    example:
      NameInModel: "NameInModel"
      ConceptImage: "ConceptImage"
      ConceptName: "ConceptName"
  SpatialSourcesEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      Type:
        type: "string"
        description: "Spatial Source type."
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
      AdditionalDocuments:
        type: "array"
        description: "Array of additional SpatialSource Documents. Mainly uses in\
          \ WP3 tp store the different representation of a SketchMap."
        items:
          $ref: "#/definitions/SpatialSourcesEndpointType_AdditionalDocuments"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Projects:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_Projects"
    description: "Data model of the /spatialsources endpoint"
    example:
      UID: "UID"
      Type: "Type"
      Description: "Description"
      AdditionalDocuments:
      - UID: "UID"
      - UID: "UID"
      Projects:
      - UID: "UID"
      - UID: "UID"
      ContentItem: "ContentItem"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  SpatialSourcesPostRequest:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      Type:
        type: "string"
        description: "Spatial Source type."
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
    example:
      Type: "Type"
      Description: "Description"
      ContentItem: "ContentItem"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  AdminSourcesEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID of AdminSource"
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      Type:
        type: "string"
        description: "Admin Source type."
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
      Concept:
        type: "string"
        description: "Zeigt auf ein Konzept (UID) in einer auf LADM aufbauenden Ontologie.\
          \ Was ist der Unterscheid zu Type? Besserer Name, daa ansosnsten Verwechselung\
          \ mit Concept aus Models"
      SpatialUnits:
        type: "array"
        description: "Array of Spatial Units. The Admin Source document provides the\
          \ legal evidenace for the registartion of the Spatial Unit in the LAS."
        items:
          $ref: "#/definitions/AdminSourcesEndpointType_SpatialUnits"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Projects:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_Projects"
    description: "Data model of the /adminsources endpoint"
    example:
      Concept: "Concept"
      UID: "UID"
      Type: "Type"
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      Projects:
      - UID: "UID"
      - UID: "UID"
      SpatialUnits:
      - UID: "UID"
      - UID: "UID"
      ContentItem: "ContentItem"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  AdminSourcesPostRequest:
    type: "object"
    required:
    - "ContentItem"
    - "Description"
    - "Name"
    properties:
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      Type:
        type: "string"
        description: "Admin Source type."
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
      Concept:
        type: "string"
        description: "Zeigt auf ein Konzept (UID) in einer auf LADM aufbauenden Ontologie.\
          \ Was ist der Unterscheid zu Type? Besserer Name, daa ansosnsten Verwechselung\
          \ mit Concept aus Models"
      SpatialUnits:
        type: "array"
        description: "Array of Spatial Units. The Admin Source document provides the\
          \ legal evidenace for the registartion of the Spatial Unit in the LAS."
        items:
          $ref: "#/definitions/AdminSourcesEndpointType_SpatialUnits"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Projects:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_Projects"
    description: "Post Request of he /adminsources endpoint"
    example:
      Concept: "Concept"
      Type: "Type"
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      Projects:
      - UID: "UID"
      - UID: "UID"
      SpatialUnits:
      - UID: "UID"
      - UID: "UID"
      ContentItem: "ContentItem"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  AdditionalDocumentsEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID"
      Type:
        type: "string"
        description: "Type of the additional document."
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
    example:
      UID: "UID"
      Type: "Type"
      Description: "Description"
      ContentItem: "ContentItem"
  AdditionalDocumentsPost:
    type: "object"
    properties:
      Type:
        type: "string"
        description: "Type of the additional document."
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
    example:
      Type: "Type"
      Description: "Description"
      ContentItem: "ContentItem"
  SpatialUnitsFeatureEndpointType:
    type: "object"
    required:
    - "crs"
    - "features"
    - "name"
    - "type"
    properties:
      type:
        type: "string"
        description: "GeoJson feature collection"
        enum:
        - "FeatureCollection"
      name:
        type: "string"
        description: "Name of the feature collection. Always SpatialUnitFeatures"
        enum:
        - "SpatialUnitFeatures"
      crs:
        $ref: "#/definitions/ProjectsEndpointType_crs"
      features:
        type: "array"
        items:
          $ref: "#/definitions/SpatialUnitsFeatureEndpointType_features"
    example:
      features:
      - geometry:
          coordinates:
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          type: "Polygon"
        type: "Feature"
        properties:
          Concept: "Concept"
          UID: "UID"
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          AdminSource:
          - UID: "UID"
          - UID: "UID"
          Projects:
          - UID: "UID"
          - UID: "UID"
          Level: "Level"
          Name: "Name"
      - geometry:
          coordinates:
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          type: "Polygon"
        type: "Feature"
        properties:
          Concept: "Concept"
          UID: "UID"
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          AdminSource:
          - UID: "UID"
          - UID: "UID"
          Projects:
          - UID: "UID"
          - UID: "UID"
          Level: "Level"
          Name: "Name"
      crs:
        type: "name"
        properties:
          name: "urn:ogc:def:crs:OGC:1.3:CRS84"
      name: "SpatialUnitFeatures"
      type: "FeatureCollection"
  SpatialUnitsFeaturePostRequest:
    type: "object"
    required:
    - "crs"
    - "features"
    - "name"
    - "type"
    properties:
      type:
        type: "string"
        description: "GeoJson feature collection"
        enum:
        - "FeatureCollection"
      name:
        type: "string"
        description: "Name of the feature collection. Always SpatialUnitFeatures"
        enum:
        - "SpatialUnitFeatures"
      crs:
        $ref: "#/definitions/ProjectsEndpointType_crs"
      features:
        type: "array"
        items:
          $ref: "#/definitions/SpatialUnitsFeaturePostRequest_features"
    example:
      features:
      - geometry:
          coordinates:
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          type: "Polygon"
        type: "Feature"
        properties:
          Concept: "Concept"
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          AdminSource:
          - UID: "UID"
          - UID: "UID"
          Projects:
          - UID: "UID"
          - UID: "UID"
          Level: "Level"
          Name: "Name"
      - geometry:
          coordinates:
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          - - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
            - - 0.80082819046101150206595775671303272247314453125
              - 0.80082819046101150206595775671303272247314453125
          type: "Polygon"
        type: "Feature"
        properties:
          Concept: "Concept"
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          AdminSource:
          - UID: "UID"
          - UID: "UID"
          Projects:
          - UID: "UID"
          - UID: "UID"
          Level: "Level"
          Name: "Name"
      crs:
        type: "name"
        properties:
          name: "urn:ogc:def:crs:OGC:1.3:CRS84"
      name: "SpatialUnitFeatures"
      type: "FeatureCollection"
  SpatialUnitBaseFeaturePostRequest:
    type: "object"
    required:
    - "Description"
    - "Name"
    properties:
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      Level:
        type: "string"
        description: "Level according to LADM"
      Concept:
        type: "string"
        description: "According to the ontology based on LADM"
      AdminSource:
        type: "array"
        description: "Related Admin Source Documents"
        items:
          $ref: "#/definitions/SpatialUnitsFeatureEndpointType_properties_AdminSource"
      BoundaryFaceString:
        type: "string"
        description: "UUID to a boundary face string"
      Projects:
        type: "array"
        description: "Related Projects"
        items:
          $ref: "#/definitions/SpatialUnitsFeatureEndpointType_properties_Projects"
    description: "Post Request of he /adminsources endpoint"
    example:
      Concept: "Concept"
      BoundaryFaceString: "BoundaryFaceString"
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      AdminSource:
      - UID: "UID"
      - UID: "UID"
      Projects:
      - UID: "UID"
      - UID: "UID"
      Level: "Level"
      Name: "Name"
  SpatialUnitConceptEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      contentitem:
        type: "string"
        description: "UID of the ContentItem"
    description: "Spatial unit concept"
    example:
      UID: "UID"
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      contentitem: "contentitem"
      Name: "Name"
  SpatialUnitConceptPostRequest:
    type: "object"
    required:
    - "Description"
    - "Name"
    properties:
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      contentitem:
        type: "string"
        description: "UID of the ContentItem"
    description: "Post Request of spatial unit concept"
    example:
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      contentitem: "contentitem"
      Name: "Name"
  BoundaryFaceStringEndpointType:
    type: "object"
    required:
    - "crs"
    - "features"
    - "name"
    - "type"
    properties:
      type:
        type: "string"
        description: "GeoJson feature collection"
        enum:
        - "FeatureCollection"
      name:
        type: "string"
        description: "Name of the feature collection. Always BoundaryFaceString"
        enum:
        - "BoundaryFaceString"
      crs:
        $ref: "#/definitions/ProjectsEndpointType_crs"
      features:
        type: "array"
        items:
          $ref: "#/definitions/BoundaryFaceStringEndpointType_features"
    example:
      features:
      - geometry:
          coordinates:
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          type: "LineString"
        type: "Feature"
        properties:
          UID: "UID"
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          SpatialUnit:
          - UID: "UID"
          - UID: "UID"
          Projects:
          - UID: "UID"
          - UID: "UID"
          Name: "Name"
      - geometry:
          coordinates:
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          type: "LineString"
        type: "Feature"
        properties:
          UID: "UID"
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          SpatialUnit:
          - UID: "UID"
          - UID: "UID"
          Projects:
          - UID: "UID"
          - UID: "UID"
          Name: "Name"
      crs:
        type: "name"
        properties:
          name: "urn:ogc:def:crs:OGC:1.3:CRS84"
      name: "BoundaryFaceString"
      type: "FeatureCollection"
  BoundaryFaceStringPostRequest:
    type: "object"
    required:
    - "crs"
    - "features"
    - "name"
    - "type"
    properties:
      type:
        type: "string"
        description: "GeoJson feature collection"
        enum:
        - "FeatureCollection"
      name:
        type: "string"
        description: "Name of the feature collection. Always BoundaryFaceString"
        enum:
        - "BoundaryFaceString"
      crs:
        $ref: "#/definitions/ProjectsEndpointType_crs"
      features:
        type: "array"
        items:
          $ref: "#/definitions/BoundaryFaceStringPostRequest_features"
    example:
      features:
      - geometry:
          coordinates:
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          type: "LineString"
        type: "Feature"
        properties:
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          SpatialUnit:
          - UID: "UID"
          - UID: "UID"
          Projects:
          - UID: "UID"
          - UID: "UID"
          Name: "Name"
      - geometry:
          coordinates:
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          type: "LineString"
        type: "Feature"
        properties:
          Description: "Description"
          LongDescription: "LongDescription"
          ExtDescriptionURL: "ExtDescriptionURL"
          SpatialUnit:
          - UID: "UID"
          - UID: "UID"
          Projects:
          - UID: "UID"
          - UID: "UID"
          Name: "Name"
      crs:
        type: "name"
        properties:
          name: "urn:ogc:def:crs:OGC:1.3:CRS84"
      name: "BoundaryFaceString"
      type: "FeatureCollection"
  TrainingsSetEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      TrainingSetType:
        type: "string"
        description: "TrainingSet type."
      TrainingSetStatus:
        type: "integer"
        format: "init32"
        description: "0 = untrained 1 = trained"
      Tools:
        type: "array"
        description: "Comma separated list tool names which can make use of the training\
          \ set."
        items:
          type: "string"
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Models:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/TrainingsSetEndpointType_Models"
    example:
      UID: "UID"
      TrainingSetType: "TrainingSetType"
      Description: "Description"
      Tools:
      - "Tools"
      - "Tools"
      TrainingSetStatus: 0
      Models:
      - UID: "UID"
      - UID: "UID"
      ContentItem: "ContentItem"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  TrainingSetsPostRequest:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      TrainingSetType:
        type: "string"
        description: "TrainingSet type."
      TrainingSetStatus:
        type: "integer"
        format: "init32"
        description: "0 = untrained 1 = trained"
      Tools:
        type: "array"
        description: "Comma separated list tool names which can make use of the training\
          \ set."
        items:
          type: "string"
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Models:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/TrainingsSetEndpointType_Models"
    example:
      TrainingSetType: "TrainingSetType"
      Description: "Description"
      Tools:
      - "Tools"
      - "Tools"
      TrainingSetStatus: 0
      Models:
      - UID: "UID"
      - UID: "UID"
      ContentItem: "ContentItem"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  ClassifierEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      ClassifierType:
        type: "string"
        description: "Classifier type."
      Tools:
        type: "array"
        description: "Comma separated list tool names which can make use of the classifier."
        items:
          type: "string"
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Models:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/TrainingsSetEndpointType_Models"
    example:
      ClassifierType: "ClassifierType"
      UID: "UID"
      Description: "Description"
      Tools:
      - "Tools"
      - "Tools"
      Models:
      - UID: "UID"
      - UID: "UID"
      ContentItem: "ContentItem"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  ClassifierPostRequest:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      ClassifierType:
        type: "string"
        description: "Classifier type."
      Tools:
        type: "array"
        description: "Comma separated list tool names which can make use of the classifier."
        items:
          type: "string"
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Models:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/TrainingsSetEndpointType_Models"
    example:
      ClassifierType: "ClassifierType"
      Description: "Description"
      Tools:
      - "Tools"
      - "Tools"
      Models:
      - UID: "UID"
      - UID: "UID"
      ContentItem: "ContentItem"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  ContentItemEndpointType:
    type: "object"
    properties:
      ContentID:
        type: "string"
        description: "UID of the ContentItem"
      ContentType:
        type: "string"
        description: "mime/type of the content"
      ContentName:
        type: "string"
        description: "Name of the contentitem. Typically the file name"
      ContentSize:
        type: "integer"
        description: "Size of the file in bytes"
      ContentDescription:
        type: "string"
        description: "Free text for description. Only plain text."
    example:
      ContentName: "ContentName"
      ContentType: "ContentType"
      ContentDescription: "ContentDescription"
      ContentID: "ContentID"
      ContentSize: 0
  MetricMapFeaturesEndpointType:
    type: "object"
    required:
    - "crs"
    - "features"
    - "name"
    - "type"
    properties:
      type:
        type: "string"
        description: "GeoJson feature collection"
        enum:
        - "FeatureCollection"
      name:
        type: "string"
        description: "Name of the feature collection. Always i4lMetricMapFeature"
        enum:
        - "i4lMetricMapFeature"
      crs:
        $ref: "#/definitions/ProjectsEndpointType_crs"
      features:
        type: "array"
        items:
          $ref: "#/definitions/MetricMapFeaturesEndpointType_features"
    example:
      features:
      - geometry:
          coordinates:
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          type: "Point"
        type: "Feature"
        properties:
          UID: "UID"
          fname: "fname"
          ftype: "ftype"
          fsubtype: "fsubtype"
          fgroup: "fgroup"
          fURI: "fURI"
      - geometry:
          coordinates:
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          type: "Point"
        type: "Feature"
        properties:
          UID: "UID"
          fname: "fname"
          ftype: "ftype"
          fsubtype: "fsubtype"
          fgroup: "fgroup"
          fURI: "fURI"
      crs:
        type: "name"
        properties:
          name: "urn:ogc:def:crs:OGC:1.3:CRS84"
      name: "i4lMetricMapFeature"
      type: "FeatureCollection"
  MetricMapFeaturePostRequest:
    type: "object"
    required:
    - "geometry"
    - "properties"
    - "type"
    properties:
      type:
        type: "string"
        enum:
        - "Feature"
      properties:
        $ref: "#/definitions/MetricMapFeaturePostRequest_properties"
      geometry:
        $ref: "#/definitions/MetricMapFeaturesEndpointType_geometry"
    example:
      geometry:
        coordinates:
        - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
        - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
        type: "Point"
      type: "Feature"
      properties:
        fname: "fname"
        ftype: "ftype"
        fsubtype: "fsubtype"
        fgroup: "fgroup"
        fURI: "fURI"
  WP5ValidationSetsEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      Status:
        type: "integer"
        format: "init32"
        description: "Status of the validation set."
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Models:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/TrainingsSetEndpointType_Models"
      Projects:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_Projects"
    example:
      Status: 0
      UID: "UID"
      Description: "Description"
      Projects:
      - UID: "UID"
      - UID: "UID"
      Models:
      - UID: "UID"
      - UID: "UID"
      ContentItem: "ContentItem"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  WP5ValidationSetsPostRequest:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      Status:
        type: "integer"
        format: "init32"
        description: "Status of the validation set."
      ContentItem:
        type: "string"
        description: "UID of the ContentItem"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Models:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/TrainingsSetEndpointType_Models"
      Projects:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_Projects"
    example:
      Status: 0
      Description: "Description"
      Projects:
      - UID: "UID"
      - UID: "UID"
      Models:
      - UID: "UID"
      - UID: "UID"
      ContentItem: "ContentItem"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  ImageSetsEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Name of the image. Filename ?"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      Metadata:
        type: "array"
        description: "Metadata for the image set. Like, flight date, etc."
        items:
          $ref: "#/definitions/ImageSetsEndpointType_Metadata"
      ContentItems:
        type: "array"
        description: "Metadata for the image set. Like, flight date, etc."
        items:
          $ref: "#/definitions/ImageSetsEndpointType_ContentItems"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Projects:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_Projects"
  DDILayersEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "Publish and Share UID (UUID) of the layer"
      Name:
        type: "string"
        description: "Layer name. Must be unique"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      Service:
        type: "string"
        description: "Service type of the layer. WFS or WMS"
      EMName:
        type: "string"
        description: "When the Em repository is uesed, this paramter contains the\
          \ name of the layer in the EM repository"
      ContentItems:
        type: "array"
        description: "List of Images (ContenItems. Used for the DDI Service."
        items:
          type: "string"
          description: "UUID of a ContentItem"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Projects:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_Projects"
    example:
      UID: "UID"
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      EMName: "EMName"
      Service: "Service"
      Projects:
      - UID: "UID"
      - UID: "UID"
      ContentItems:
      - "ContentItems"
      - "ContentItems"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  DDILayersPostRequest:
    type: "object"
    required:
    - "Name"
    - "Service"
    properties:
      Name:
        type: "string"
        description: "Layer name. Must be unique"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      Service:
        type: "string"
        description: "Service type of the layer. WFS or WMS"
      EMName:
        type: "string"
        description: "When the Em repository is uesed, this paramter contains the\
          \ name of the layer in the EM repository"
      ContentItems:
        type: "array"
        description: "List of Images (ContenItems. Used for the DDI Service."
        items:
          type: "string"
          description: "UUID of a ContentItem"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
      Projects:
        type: "array"
        description: "Array of Projects (UID)."
        items:
          $ref: "#/definitions/ModelsEndpointType_Projects"
    example:
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      EMName: "EMName"
      Service: "Service"
      Projects:
      - UID: "UID"
      - UID: "UID"
      ContentItems:
      - "ContentItems"
      - "ContentItems"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  TagsEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UUID"
      TagValue:
        type: "string"
        description: "Display value of the tag"
      TaggedObjects:
        type: "array"
        description: "List of tagged objects: Type, UUID, Name, Description"
        items:
          $ref: "#/definitions/TagsEndpointType_TaggedObjects"
      TaggedObjectsSum:
        type: "array"
        items:
          $ref: "#/definitions/TagsEndpointType_TaggedObjectsSum"
    example:
      UID: "UID"
      TaggedObjectsSum:
      - ObjectType: "ObjectType"
        Count: 0
      - ObjectType: "ObjectType"
        Count: 0
      TaggedObjects:
      - ObjectType: "ObjectType"
        ObjectUUID: "ObjectUUID"
        Description: "Description"
        Name: "Name"
      - ObjectType: "ObjectType"
        ObjectUUID: "ObjectUUID"
        Description: "Description"
        Name: "Name"
      TagValue: "TagValue"
  TagsPostRequest:
    type: "array"
    items:
      type: "string"
  TagsListResponse:
    type: "array"
    description: "Array of tags (strings)."
    items:
      type: "string"
  ConnectedObjectsEndpointType:
    type: "array"
    items:
      $ref: "#/definitions/ConnectedObjectsEndpointType_inner"
  RFC6902PatchRequest:
    type: "array"
    items:
      type: "object"
      properties: {}
  ToolsEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UID of the tool"
      Name:
        type: "string"
        description: "Name of the tool. Should be WP name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      LongDescription:
        type: "string"
        description: "Free text for long description."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external content. The content is added as static html\
          \ in the the standard web client."
      Supplier:
        type: "string"
        description: "Free text for description. Only plain text."
      Version:
        type: "string"
        description: "Tool version."
      ToolURL:
        type: "string"
        description: "Link to external documentation"
      Image:
        $ref: "#/definitions/ToolsEndpointType_Image"
      EntryPoints:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ToolsEndpointType_EntryPoints"
    example:
      UID: "UID"
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      ToolURL: "ToolURL"
      Version: "Version"
      Supplier: "Supplier"
      EntryPoints:
      - Description: "Description"
        LongDescription: "LongDescription"
        EntryPoint: "EntryPoint"
        Name: "Name"
      - Description: "Description"
        LongDescription: "LongDescription"
        EntryPoint: "EntryPoint"
        Name: "Name"
      Image:
        UID: "UID"
        ReleaseDate: "2000-01-23"
        Image: "Image"
      Name: "Name"
  ProcessEndpointType:
    type: "object"
    properties:
      UID:
        type: "string"
        description: "UID of the process"
      Project:
        $ref: "#/definitions/ProcessEndpointType_Project"
      Status:
        type: "string"
        description: "Status of the project. Can be one of:\n  * WAITING: Process\
          \ is queued for execution\n  * RUNNING: Process is currently executing\n\
          \  * FINISHED: Process terminated normally\n  * ABORTED: Process terminated\
          \ unexpectedly\n  * ZOMBIE: Process is listed in the platform process table,\
          \ but the internal (process) API has no information about it. Possible in\
          \ case of historical/archived processes or due to platform error.\n"
        enum:
        - "WAITING"
        - "RUNNING"
        - "FINISHED"
        - "ABORTED"
        - "ZOMBIE"
      CreatedAt:
        type: "string"
        format: "date"
        description: "Creation date"
      CreatedBy:
        type: "string"
        description: "User name of the creator"
      LastModifiedAt:
        type: "string"
        format: "date"
        description: "Last modification date"
      LastModifiedBy:
        type: "string"
        description: "User name of the last modifier"
      Tool:
        $ref: "#/definitions/ProcessEndpointType_Tool"
      Logs:
        type: "string"
        description: "Logs from the process"
      Results:
        type: "array"
        description: "Results from the process"
        items:
          $ref: "#/definitions/ProcessEndpointType_Results"
    example:
      Status: "WAITING"
      UID: "UID"
      Project:
        UID: "UID"
        Description: "Description"
        Name: "Name"
      LastModifiedBy: "LastModifiedBy"
      CreatedBy: "CreatedBy"
      LastModifiedAt: "2000-01-23"
      Results:
      - ResultType: "ResultType"
        ResultUID: "ResultUID"
      - ResultType: "ResultType"
        ResultUID: "ResultUID"
      CreatedAt: "2000-01-23"
      Logs: "Logs"
      Tool:
        ToolName: "ToolName"
        Version: "Version"
        EntryPoint:
          EntryPointName: "EntryPointName"
          Parameter:
          - ParameterValue: "ParameterValue"
            ParameterName: "ParameterName"
          - ParameterValue: "ParameterValue"
            ParameterName: "ParameterName"
  ProcessPostRequest:
    type: "object"
    required:
    - "Project"
    - "Tool"
    properties:
      Project:
        $ref: "#/definitions/ProcessPostRequest_Project"
      Tool:
        $ref: "#/definitions/ProcessPostRequest_Tool"
    example:
      Project:
        UID: "UID"
      Tool:
        ToolName: "ToolName"
        Version: "Version"
        EntryPoint:
          EntryPointName: "EntryPointName"
          Parameter:
          - ParameterValue: "ParameterValue"
            ParameterName: "ParameterName"
          - ParameterValue: "ParameterValue"
            ParameterName: "ParameterName"
  LogEntryEndpointType:
    type: "object"
    properties:
      SeqNr:
        type: "integer"
        description: "Ordering number. Lowest means oldest entry"
      LogDate:
        type: "string"
        format: "date"
        description: "Log date in dd.mm.yyyy hh24:mi:ss"
      LogSource:
        type: "string"
        description: "Source of the log. Could be either GUI, Tool, ..."
      LogLevel:
        type: "string"
        description: "error, info, warning, debug"
      LogMsg:
        type: "string"
        description: "Log message. Free text"
    description: "Log entry"
    example:
      LogMsg: "LogMsg"
      SeqNr: 0
      LogSource: "LogSource"
      LogDate: "2000-01-23"
      LogLevel: "LogLevel"
  LogEntryPostRequest:
    type: "object"
    properties:
      LogSource:
        type: "string"
        description: "Source of the log. Could be either GUI, Tool, ..."
      LogLevel:
        type: "string"
        description: "error, info, warning, debug"
      LogMsg:
        type: "string"
        description: "Log message. Free text"
    description: "Log entry"
    example:
      LogMsg: "LogMsg"
      LogSource: "LogSource"
      LogLevel: "LogLevel"
  RFC6902PatchRequest_org:
    type: "array"
    items:
      $ref: "#/definitions/RFC6902PatchRequest_org_inner"
  PublishAndShareConfigEndpointType:
    type: "array"
    items:
      $ref: "#/definitions/PublishAndShareConfigEndpointType_inner"
  ProjectsEndpointType_crs_properties:
    properties:
      name:
        type: "string"
        enum:
        - "urn:ogc:def:crs:OGC:1.3:CRS84"
        - "urn:ogc:def:crs:OGC::CRS84"
    example:
      name: "urn:ogc:def:crs:OGC:1.3:CRS84"
  ProjectsEndpointType_crs:
    properties:
      type:
        type: "string"
        description: "Coordinate system definition"
        enum:
        - "name"
      properties:
        $ref: "#/definitions/ProjectsEndpointType_crs_properties"
    example:
      type: "name"
      properties:
        name: "urn:ogc:def:crs:OGC:1.3:CRS84"
  ProjectsEndpointType_properties_Models:
    properties:
      UID:
        type: "string"
        description: "UUID of the Models."
    example:
      UID: "UID"
  ProjectsEndpointType_properties_SpatialSources:
    properties:
      UID:
        type: "string"
        description: "UUID of the SpatialSources."
    example:
      UID: "UID"
  ProjectsEndpointType_properties:
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      ProjectDir:
        type: "string"
        description: "URI to a directory resource. Not clear if needed."
      Models:
        type: "array"
        description: "Array of models (UID)."
        items:
          $ref: "#/definitions/ProjectsEndpointType_properties_Models"
      SpatialSources:
        type: "array"
        description: "Array of SpatialSources (UID)."
        items:
          $ref: "#/definitions/ProjectsEndpointType_properties_SpatialSources"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
    example:
      UID: "UID"
      ProjectDir: "ProjectDir"
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      SpatialSources:
      - UID: "UID"
      - UID: "UID"
      Models:
      - UID: "UID"
      - UID: "UID"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  ProjectsEndpointType_geometry:
    properties:
      type:
        type: "string"
        enum:
        - "Polygon"
      coordinates:
        type: "array"
        items:
          type: "array"
          items:
            type: "array"
            items:
              type: "number"
            maxItems: 2
            minItems: 2
    example:
      coordinates:
      - - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
        - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
      - - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
        - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
      type: "Polygon"
  ProjectsEndpointType_features:
    properties:
      type:
        type: "string"
        enum:
        - "Feature"
      properties:
        $ref: "#/definitions/ProjectsEndpointType_properties"
      geometry:
        $ref: "#/definitions/ProjectsEndpointType_geometry"
    example:
      geometry:
        coordinates:
        - - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
        - - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
        type: "Polygon"
      type: "Feature"
      properties:
        UID: "UID"
        ProjectDir: "ProjectDir"
        Description: "Description"
        LongDescription: "LongDescription"
        ExtDescriptionURL: "ExtDescriptionURL"
        SpatialSources:
        - UID: "UID"
        - UID: "UID"
        Models:
        - UID: "UID"
        - UID: "UID"
        Tags:
        - "Tags"
        - "Tags"
        Name: "Name"
  ProjectsPostRequest_properties_SpatialSources:
    properties:
      UID:
        type: "string"
        description: "UUID of SpatialSources"
    example:
      UID: "UID"
  ProjectsPostRequest_properties:
    properties:
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      ProjectDir:
        type: "string"
        description: "URI to a directory resource. Not clear if needed."
      Models:
        type: "array"
        description: "Array of models (UID)."
        items:
          $ref: "#/definitions/ProjectsEndpointType_properties_Models"
      SpatialSources:
        type: "array"
        description: "Array of SpatialSources (UID)."
        items:
          $ref: "#/definitions/ProjectsPostRequest_properties_SpatialSources"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
    example:
      ProjectDir: "ProjectDir"
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      SpatialSources:
      - UID: "UID"
      - UID: "UID"
      Models:
      - UID: "UID"
      - UID: "UID"
      Tags:
      - "Tags"
      - "Tags"
      Name: "Name"
  ProjectsPostRequest_features:
    properties:
      type:
        type: "string"
        enum:
        - "Feature"
      properties:
        $ref: "#/definitions/ProjectsPostRequest_properties"
      geometry:
        $ref: "#/definitions/ProjectsEndpointType_geometry"
    example:
      geometry:
        coordinates:
        - - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
        - - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
        type: "Polygon"
      type: "Feature"
      properties:
        ProjectDir: "ProjectDir"
        Description: "Description"
        LongDescription: "LongDescription"
        ExtDescriptionURL: "ExtDescriptionURL"
        SpatialSources:
        - UID: "UID"
        - UID: "UID"
        Models:
        - UID: "UID"
        - UID: "UID"
        Tags:
        - "Tags"
        - "Tags"
        Name: "Name"
  ProjectsEndpointType2_properties:
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Freely chosen name"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      ConnectedObjects:
        $ref: "#/definitions/ConnectedObjectsEndpointType"
      Tags:
        type: "array"
        description: "Array of tags (strings)."
        items:
          type: "string"
  ProjectsEndpointType2_features:
    properties:
      type:
        type: "string"
        enum:
        - "Feature"
      properties:
        $ref: "#/definitions/ProjectsEndpointType2_properties"
      geometry:
        $ref: "#/definitions/ProjectsEndpointType_geometry"
  ModelsEndpointType_ModelClasses:
    properties:
      UID:
        type: "string"
        description: "UUID od associated model classes"
    example:
      UID: "UID"
  ModelsEndpointType_Projects:
    properties:
      UID:
        type: "string"
        description: "UUID of associated project."
    example:
      UID: "UID"
  ModelClassesEndpointType_Model:
    properties:
      UID:
        type: "string"
        description: "UUID of associated models."
    description: "Array of Projects (UID)."
    example:
      UID: "UID"
  SpatialSourcesEndpointType_AdditionalDocuments:
    properties:
      UID:
        type: "string"
        description: "UUID of the additional document."
    example:
      UID: "UID"
  AdminSourcesEndpointType_SpatialUnits:
    properties:
      UID:
        type: "string"
        description: "UUID of the spatial unit."
    example:
      UID: "UID"
  SpatialUnitsFeatureEndpointType_properties_AdminSource:
    properties:
      UID:
        type: "string"
        description: " UID of an Admin Source Document Index"
    example:
      UID: "UID"
  SpatialUnitsFeatureEndpointType_properties_Projects:
    properties:
      UID:
        type: "string"
        description: " UID of an Project"
    example:
      UID: "UID"
  SpatialUnitsFeatureEndpointType_properties:
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Name of the Spatial Unit"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      Concept:
        type: "string"
        description: "According to the ontology based on LADM"
      Level:
        type: "string"
        description: "Level according to LADM"
      AdminSource:
        type: "array"
        description: "Related Admin Source Documents"
        items:
          $ref: "#/definitions/SpatialUnitsFeatureEndpointType_properties_AdminSource"
      Projects:
        type: "array"
        description: "Related Projects"
        items:
          $ref: "#/definitions/SpatialUnitsFeatureEndpointType_properties_Projects"
    example:
      Concept: "Concept"
      UID: "UID"
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      AdminSource:
      - UID: "UID"
      - UID: "UID"
      Projects:
      - UID: "UID"
      - UID: "UID"
      Level: "Level"
      Name: "Name"
  SpatialUnitsFeatureEndpointType_features:
    properties:
      type:
        type: "string"
        enum:
        - "Feature"
      properties:
        $ref: "#/definitions/SpatialUnitsFeatureEndpointType_properties"
      geometry:
        $ref: "#/definitions/ProjectsEndpointType_geometry"
    example:
      geometry:
        coordinates:
        - - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
        - - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
        type: "Polygon"
      type: "Feature"
      properties:
        Concept: "Concept"
        UID: "UID"
        Description: "Description"
        LongDescription: "LongDescription"
        ExtDescriptionURL: "ExtDescriptionURL"
        AdminSource:
        - UID: "UID"
        - UID: "UID"
        Projects:
        - UID: "UID"
        - UID: "UID"
        Level: "Level"
        Name: "Name"
  SpatialUnitsFeaturePostRequest_properties:
    required:
    - "Concept"
    - "Name"
    properties:
      Name:
        type: "string"
        description: "Name of the Spatial Unit"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      Concept:
        type: "string"
        description: "According to the ontology based on LADM"
      Level:
        type: "string"
        description: "Level according to LADM"
      AdminSource:
        type: "array"
        description: "Related Admin Source Documents"
        items:
          $ref: "#/definitions/SpatialUnitsFeatureEndpointType_properties_AdminSource"
      Projects:
        type: "array"
        description: "Related Projects"
        items:
          $ref: "#/definitions/SpatialUnitsFeatureEndpointType_properties_Projects"
    example:
      Concept: "Concept"
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      AdminSource:
      - UID: "UID"
      - UID: "UID"
      Projects:
      - UID: "UID"
      - UID: "UID"
      Level: "Level"
      Name: "Name"
  SpatialUnitsFeaturePostRequest_features:
    properties:
      type:
        type: "string"
        enum:
        - "Feature"
      properties:
        $ref: "#/definitions/SpatialUnitsFeaturePostRequest_properties"
      geometry:
        $ref: "#/definitions/ProjectsEndpointType_geometry"
    example:
      geometry:
        coordinates:
        - - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
        - - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
          - - 0.80082819046101150206595775671303272247314453125
            - 0.80082819046101150206595775671303272247314453125
        type: "Polygon"
      type: "Feature"
      properties:
        Concept: "Concept"
        Description: "Description"
        LongDescription: "LongDescription"
        ExtDescriptionURL: "ExtDescriptionURL"
        AdminSource:
        - UID: "UID"
        - UID: "UID"
        Projects:
        - UID: "UID"
        - UID: "UID"
        Level: "Level"
        Name: "Name"
  BoundaryFaceStringEndpointType_properties_SpatialUnit:
    properties:
      UID:
        type: "string"
        description: " UID of an spatial unit feature"
    example:
      UID: "UID"
  BoundaryFaceStringEndpointType_properties:
    properties:
      UID:
        type: "string"
        description: "UUID"
      Name:
        type: "string"
        description: "Name of the Spatial Unit"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      SpatialUnit:
        type: "array"
        description: "Related SpatialUnit"
        items:
          $ref: "#/definitions/BoundaryFaceStringEndpointType_properties_SpatialUnit"
      Projects:
        type: "array"
        description: "Related Projects"
        items:
          $ref: "#/definitions/SpatialUnitsFeatureEndpointType_properties_Projects"
    example:
      UID: "UID"
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      SpatialUnit:
      - UID: "UID"
      - UID: "UID"
      Projects:
      - UID: "UID"
      - UID: "UID"
      Name: "Name"
  BoundaryFaceStringEndpointType_geometry:
    properties:
      type:
        type: "string"
        enum:
        - "LineString"
      coordinates:
        type: "array"
        items:
          type: "array"
          items:
            type: "number"
          maxItems: 2
          minItems: 2
    example:
      coordinates:
      - - 0.80082819046101150206595775671303272247314453125
        - 0.80082819046101150206595775671303272247314453125
      - - 0.80082819046101150206595775671303272247314453125
        - 0.80082819046101150206595775671303272247314453125
      type: "LineString"
  BoundaryFaceStringEndpointType_features:
    properties:
      type:
        type: "string"
        enum:
        - "Feature"
      properties:
        $ref: "#/definitions/BoundaryFaceStringEndpointType_properties"
      geometry:
        $ref: "#/definitions/BoundaryFaceStringEndpointType_geometry"
    example:
      geometry:
        coordinates:
        - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
        - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
        type: "LineString"
      type: "Feature"
      properties:
        UID: "UID"
        Description: "Description"
        LongDescription: "LongDescription"
        ExtDescriptionURL: "ExtDescriptionURL"
        SpatialUnit:
        - UID: "UID"
        - UID: "UID"
        Projects:
        - UID: "UID"
        - UID: "UID"
        Name: "Name"
  BoundaryFaceStringPostRequest_properties:
    properties:
      Name:
        type: "string"
        description: "Name of the Spatial Unit"
      Description:
        type: "string"
        description: "Free text for description. Only plain text. Max 255 char."
      LongDescription:
        type: "string"
        description: "Text for description. Can contain html. Max 4000 char."
      ExtDescriptionURL:
        type: "string"
        description: "URL to an external description of the document."
      SpatialUnit:
        type: "array"
        description: "Related SpatialUnit"
        items:
          $ref: "#/definitions/BoundaryFaceStringEndpointType_properties_SpatialUnit"
      Projects:
        type: "array"
        description: "Related Projects"
        items:
          $ref: "#/definitions/SpatialUnitsFeatureEndpointType_properties_Projects"
    example:
      Description: "Description"
      LongDescription: "LongDescription"
      ExtDescriptionURL: "ExtDescriptionURL"
      SpatialUnit:
      - UID: "UID"
      - UID: "UID"
      Projects:
      - UID: "UID"
      - UID: "UID"
      Name: "Name"
  BoundaryFaceStringPostRequest_features:
    properties:
      type:
        type: "string"
        enum:
        - "Feature"
      properties:
        $ref: "#/definitions/BoundaryFaceStringPostRequest_properties"
      geometry:
        $ref: "#/definitions/BoundaryFaceStringEndpointType_geometry"
    example:
      geometry:
        coordinates:
        - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
        - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
        type: "LineString"
      type: "Feature"
      properties:
        Description: "Description"
        LongDescription: "LongDescription"
        ExtDescriptionURL: "ExtDescriptionURL"
        SpatialUnit:
        - UID: "UID"
        - UID: "UID"
        Projects:
        - UID: "UID"
        - UID: "UID"
        Name: "Name"
  TrainingsSetEndpointType_Models:
    properties:
      UID:
        type: "string"
        description: "UUID of associated models."
    example:
      UID: "UID"
  MetricMapFeaturesEndpointType_properties:
    properties:
      UID:
        type: "string"
        description: "UUID"
      fgroup:
        type: "string"
        description: "Name of the feature group"
      ftype:
        type: "string"
        description: "Name of the feature type"
      fsubtype:
        type: "string"
        description: "Name of the feature subtype"
      fname:
        type: "string"
        description: "Freely chosen name"
      fURI:
        type: "string"
        description: "URI to the feature definition"
    example:
      UID: "UID"
      fname: "fname"
      ftype: "ftype"
      fsubtype: "fsubtype"
      fgroup: "fgroup"
      fURI: "fURI"
  MetricMapFeaturesEndpointType_geometry:
    properties:
      type:
        type: "string"
        enum:
        - "Point"
        - "LineString"
        - "Polygon"
      coordinates:
        type: "array"
        items:
          type: "array"
          items:
            type: "number"
          maxItems: 2
          minItems: 2
    example:
      coordinates:
      - - 0.80082819046101150206595775671303272247314453125
        - 0.80082819046101150206595775671303272247314453125
      - - 0.80082819046101150206595775671303272247314453125
        - 0.80082819046101150206595775671303272247314453125
      type: "Point"
  MetricMapFeaturesEndpointType_features:
    properties:
      type:
        type: "string"
        enum:
        - "Feature"
      properties:
        $ref: "#/definitions/MetricMapFeaturesEndpointType_properties"
      geometry:
        $ref: "#/definitions/MetricMapFeaturesEndpointType_geometry"
    example:
      geometry:
        coordinates:
        - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
        - - 0.80082819046101150206595775671303272247314453125
          - 0.80082819046101150206595775671303272247314453125
        type: "Point"
      type: "Feature"
      properties:
        UID: "UID"
        fname: "fname"
        ftype: "ftype"
        fsubtype: "fsubtype"
        fgroup: "fgroup"
        fURI: "fURI"
  MetricMapFeaturePostRequest_properties:
    required:
    - "fgroup"
    - "fname"
    properties:
      fgroup:
        type: "string"
        description: "Name of the feature group"
      ftype:
        type: "string"
        description: "Name of the feature type"
      fsubtype:
        type: "string"
        description: "Name of the feature subtype"
      fname:
        type: "string"
        description: "Freely chosen name"
      fURI:
        type: "string"
        description: "URI to the feature definition"
    example:
      fname: "fname"
      ftype: "ftype"
      fsubtype: "fsubtype"
      fgroup: "fgroup"
      fURI: "fURI"
  ImageSetsEndpointType_Metadata:
    properties:
      MetaDataKey:
        type: "string"
        description: "Name of the metadata key"
      MetaDataValue:
        type: "string"
        description: "Value of the metadata"
  ImageSetsEndpointType_ContentItems:
    properties:
      ContentUID:
        type: "string"
        description: "UUID of a ContentItem"
      Description:
        type: "string"
        description: "Description related to the image set"
  TagsEndpointType_TaggedObjects:
    properties:
      ObjectType:
        type: "string"
        description: "Project, Model, TrainingSet, etc."
      ObjectUUID:
        type: "string"
        description: "UUID of the object"
      Name:
        type: "string"
        description: "Name of the object"
      Description:
        type: "string"
        description: "Description of the object."
    example:
      ObjectType: "ObjectType"
      ObjectUUID: "ObjectUUID"
      Description: "Description"
      Name: "Name"
  TagsEndpointType_TaggedObjectsSum:
    properties:
      ObjectType:
        type: "string"
        description: "Project, Model, TrainingSet, etc."
      Count:
        type: "integer"
        description: "Number of object"
    example:
      ObjectType: "ObjectType"
      Count: 0
  ConnectedObjectsEndpointType_inner:
    properties:
      projectUID:
        type: "string"
        description: "UUID of the project"
      TypeOfConnectedObject:
        type: "string"
        description: "Type of the connected object from item2item"
      NameOfConnectedObject:
        type: "string"
        description: "Name of the object, taken from the object table"
      UUIDofConnectObject:
        type: "string"
        description: "UUID of the connected object"
  ToolsEndpointType_Image:
    properties:
      UID:
        type: "string"
        description: "UID of the image"
      ReleaseDate:
        type: "string"
        format: "date"
        description: "Release Data of of the tool image"
      Image:
        type: "string"
        description: "Image of the tool"
    description: "Details about the image"
    example:
      UID: "UID"
      ReleaseDate: "2000-01-23"
      Image: "Image"
  ToolsEndpointType_EntryPoints:
    properties:
      Name:
        type: "string"
        description: "Name of the EntryPoint or sub tool"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
      LongDescription:
        type: "string"
        description: "Free text for long description. Only plain text."
      EntryPoint:
        type: "string"
        description: "How to start the sub tool"
    description: ""
    example:
      Description: "Description"
      LongDescription: "LongDescription"
      EntryPoint: "EntryPoint"
      Name: "Name"
  ProcessEndpointType_Project:
    properties:
      UID:
        type: "string"
        description: "UID of the project"
      Name:
        type: "string"
        description: "Name of the project"
      Description:
        type: "string"
        description: "Free text for description. Only plain text."
    description: "A process always belongs to a project"
    example:
      UID: "UID"
      Description: "Description"
      Name: "Name"
  ProcessEndpointType_Tool_EntryPoint_Parameter:
    properties:
      ParameterName:
        type: "string"
        description: "Name of the parameter"
      ParameterValue:
        type: "string"
        description: "Value of the parameter"
    example:
      ParameterValue: "ParameterValue"
      ParameterName: "ParameterName"
  ProcessEndpointType_Tool_EntryPoint:
    properties:
      EntryPointName:
        type: "string"
        description: "Name of the entry point"
      Parameter:
        type: "array"
        description: "Parameters used in the process"
        items:
          $ref: "#/definitions/ProcessEndpointType_Tool_EntryPoint_Parameter"
    description: "Entry point used in the process"
    example:
      EntryPointName: "EntryPointName"
      Parameter:
      - ParameterValue: "ParameterValue"
        ParameterName: "ParameterName"
      - ParameterValue: "ParameterValue"
        ParameterName: "ParameterName"
  ProcessEndpointType_Tool:
    properties:
      ToolName:
        type: "string"
        description: "Name of the tool"
      Version:
        type: "string"
        description: "Version of the tool"
      EntryPoint:
        $ref: "#/definitions/ProcessEndpointType_Tool_EntryPoint"
    description: "Information about the tool executed by the process"
    example:
      ToolName: "ToolName"
      Version: "Version"
      EntryPoint:
        EntryPointName: "EntryPointName"
        Parameter:
        - ParameterValue: "ParameterValue"
          ParameterName: "ParameterName"
        - ParameterValue: "ParameterValue"
          ParameterName: "ParameterName"
  ProcessEndpointType_Results:
    properties:
      ResultType:
        type: "string"
        description: "Spatial Unit/Orthomosaic/Boundary Face String/MetricMapFeature\
          \  "
      ResultUID:
        type: "string"
        description: "UUID"
    example:
      ResultType: "ResultType"
      ResultUID: "ResultUID"
  ProcessPostRequest_Project:
    required:
    - "UID"
    properties:
      UID:
        type: "string"
        description: "UID of the project"
    description: "A process always belongs to a project"
    example:
      UID: "UID"
  ProcessPostRequest_Tool_EntryPoint:
    required:
    - "EntryPointName"
    properties:
      EntryPointName:
        type: "string"
        description: "Name of the entry point"
      Parameter:
        type: "array"
        description: "Parameters used in the process"
        items:
          $ref: "#/definitions/ProcessEndpointType_Tool_EntryPoint_Parameter"
    description: "Entry point used in the process"
    example:
      EntryPointName: "EntryPointName"
      Parameter:
      - ParameterValue: "ParameterValue"
        ParameterName: "ParameterName"
      - ParameterValue: "ParameterValue"
        ParameterName: "ParameterName"
  ProcessPostRequest_Tool:
    required:
    - "ToolName"
    - "Version"
    properties:
      ToolName:
        type: "string"
        description: "Name of the tool"
      Version:
        type: "string"
        description: "Version of the tool"
      EntryPoint:
        $ref: "#/definitions/ProcessPostRequest_Tool_EntryPoint"
    description: "Information about the tool executed by the process"
    example:
      ToolName: "ToolName"
      Version: "Version"
      EntryPoint:
        EntryPointName: "EntryPointName"
        Parameter:
        - ParameterValue: "ParameterValue"
          ParameterName: "ParameterName"
        - ParameterValue: "ParameterValue"
          ParameterName: "ParameterName"
  RFC6902PatchRequest_org_inner:
    required:
    - "op"
    - "path"
    properties:
      op:
        type: "string"
        enum:
        - "test"
        - "remove"
      path:
        type: "string"
      from:
        type: "string"
      value:
        type: "string"
  PublishAndShareConfigEndpointType_inner:
    properties:
      configkey:
        type: "string"
        description: "Configuration parameter: Key"
      configvalue:
        type: "string"
        description: "Configuration paramter: Value"
      description:
        type: "string"
        description: "Configuration paratmeter: Description"
parameters:
  uid_query:
    name: "uid"
    in: "query"
    description: "Comma separated list of UID"
    required: false
    type: "array"
    items:
      type: "string"
  name_query:
    name: "name"
    in: "query"
    description: "Comma separated list of names"
    required: false
    type: "array"
    items:
      type: "string"
  tags_query:
    name: "tags"
    in: "query"
    description: "Comma separated list of tags"
    required: false
    type: "array"
    items:
      type: "string"
  page_query:
    name: "page"
    in: "query"
    description: "Requests for collections can return between 0 and N results, controlled\
      \ using the per_page and page query parameters. All endpoints are limited to\
      \ 10 results by default."
    required: false
    type: "integer"
  sort_query:
    name: "sort"
    in: "query"
    description: "The sorting is initiated by the sort query parameter and a list\
      \ of comma separated list of fields to sort by."
    required: false
    type: "string"
  fields_query:
    name: "fields"
    in: "query"
    description: "Comma separated list of field names"
    required: false
    type: "array"
    items:
      type: "string"
  embed_query:
    name: "embed"
    in: "query"
    description: "Embedding is triggered by passing in an embed query parameter, which\
      \ takes a comma separated list of endpoint types. Single fields can be selected\
      \ a dot-notation (endpoint-type.property-name)"
    required: false
    type: "array"
    items:
      type: "string"
  envelope_query:
    name: "envelope"
    in: "query"
    description: "The endpoint can package everything (header, status code) neatly\
      \ into the response body. Include envelope=true as a request parameter. The\
      \ API will always return a 200 HTTP status code. The real status, headers and\
      \ response will be within the body."
    required: false
    type: "string"
    enum:
    - "yes"
    - "no"
  i4l-process-uid_header:
    name: "i4l-process-uid"
    in: "header"
    description: "Process UID. This parameter can be used by an its4land tool running\
      \ inside the runtime environment to pass the process uid to the endpoint. With\
      \ this information the endpoint can associate the newly created or updated resource\
      \ with the process."
    required: false
    type: "string"
